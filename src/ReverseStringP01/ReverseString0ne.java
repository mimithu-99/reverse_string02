package ReverseStringP01;

public class ReverseString0ne {
    public static void main(String[] args) {
        // 1. Using + (string concatenation) operator.

        String str = "ABCD";
        String rev = "";

        int len = str.length(); // 4
        str.charAt(0);

        for (int i = len -1; i >= 0 ; i--) { // 3 2 1 0 -1
            rev = rev + str.charAt(i);
        }
        System.out.println(rev); //D

    }
}

/*
str = ABCD;
rev = D+C+B+A;

 */
/*

package ReverseStringP01; // এই লাইনটি ঘোষণা করে যে ক্লাসটি ReverseStringP01 নামে একটি প্যাকেজের অংশ। প্যাকেজ হল কোড সংগঠিত রাখার উপায়।

public class ReverseString0ne { // এই লাইনটি একটি পাবলিক ক্লাস ঘোষণা করছে যার নাম ReverseString0ne। একটি ক্লাস হল কোডের একটি ব্লক যা একটি নির্দিষ্ট কাজ বা কার্যক্রম সম্পন্ন করে।
    public static void main(String[] args) { // এটি মেইন মেথড। এটি প্রোগ্রামের প্রবেশ পয়েন্ট যেখানে কার্যক্রম শুরু হয়। যখনই প্রোগ্রামটি চালানো হয়, এই মেথডটি প্রথমে কার্যকর হয়।
        // 1. + (স্ট্রিং যোগ) অপারেটর ব্যবহার করে।

        String str = "ABCD"; // এই লাইনটি 'str' নামে একটি স্ট্রিং ভেরিয়েবল ঘোষণা করছে এবং এটিকে "ABCD" মান দিয়ে আরম্ভ করছে। স্ট্রিং হল অক্ষরের একটি সিরিজ।
        String rev = ""; // এই লাইনটি 'rev' নামে আরেকটি স্ট্রিং ভেরিয়েবল ঘোষণা করছে এবং এটিকে খালি স্ট্রিং দিয়ে আরম্ভ করছে। আমরা এটি ব্যবহার করে স্ট্রিংটি উল্টো করব।

        int len = str.length(); // এই লাইনটি স্ট্রিং 'str' এর দৈর্ঘ্য গণনা করছে এবং এটি 'len' নামের ইন্টিজার ভেরিয়েবলে সংরক্ষণ করছে। "ABCD" এর জন্য, len হবে 4।
        // উদাহরণ: "ABCD" এর দৈর্ঘ্য 4 কারণ এতে ৪টি অক্ষর রয়েছে।

        for (int i = len - 1; i >= 0 ; i--) { // এটি একটি for লুপ যা 'i' দিয়ে শুরু হয়, যা স্ট্রিংয়ের শেষ ইনডেক্স (len - 1, অর্থাৎ 3) থেকে শুরু হয়। লুপটি ০ পর্যন্ত চলবে।
            // len - 1 মানে স্ট্রিংয়ের শেষ অক্ষরের ইনডেক্স। উদাহরণস্বরূপ: "ABCD" এর জন্য, len - 1 হল 3 কারণ ইনডেক্স 0 থেকে শুরু হয়।
            rev = rev + str.charAt(i); // এই লাইনটি 'str' এর ইনডেক্স 'i' এর ক্যারেক্টারটি 'rev' এর সাথে যোগ করে এবং 'rev' তে সংরক্ষণ করে।
            // উদাহরণস্বরূপ: প্রথমবার লুপটি চালানোর সময়, str.charAt(3) হল 'D', তাই rev = "" + "D" যা "D"।
            // দ্বিতীয়বার লুপটি চালানোর সময়, str.charAt(2) হল 'C', তাই rev = "D" + "C" যা "DC"।
            // তৃতীয়বার লুপটি চালানোর সময়, str.charAt(1) হল 'B', তাই rev = "DC" + "B" যা "DCB"।
            // চতুর্থবার লুপটি চালানোর সময়, str.charAt(0) হল 'A', তাই rev = "DCB" + "A" যা "DCBA"।
        }
        System.out.println(rev); // এই লাইনটি 'rev' প্রিন্ট করে। এই প্রোগ্রামের আউটপুট হবে "DCBA" কারণ আমরা "ABCD" স্ট্রিংটি উল্টো করেছি।

    }
}
এখন, এই কোডটি কীভাবে কাজ করে তা ধাপে ধাপে ব্যাখ্যা করছি:

package ReverseStringP01; – এটি কোডটিকে একটি প্যাকেজের মধ্যে রাখে। এটি মূলত কোড সংগঠনের জন্য ব্যবহৃত হয়।
public class ReverseString0ne { – এটি একটি নতুন ক্লাস ঘোষণা করে যার নাম ReverseString0ne।
public static void main(String[] args) { – এটি মেইন মেথড, যেখান থেকে প্রোগ্রামটি চালু হয়।
String str = "ABCD"; – একটি স্ট্রিং ভেরিয়েবল str তৈরি করে এবং এটিতে "ABCD" মান রাখে।
String rev = ""; – একটি খালি স্ট্রিং ভেরিয়েবল rev তৈরি করে যেখানে উল্টো স্ট্রিংটি রাখা হবে।
int len = str.length(); – str স্ট্রিংটির দৈর্ঘ্য গণনা করে এবং len ভেরিয়েবলে রাখে। "ABCD" এর দৈর্ঘ্য ৪।
for (int i = len - 1; i >= 0 ; i--) { – একটি লুপ যা স্ট্রিংয়ের শেষ ক্যারেক্টার থেকে শুরু করে প্রথম ক্যারেক্টার পর্যন্ত চলে।
rev = rev + str.charAt(i); – লুপটি প্রতিবার চলার সময়, str এর বর্তমান ক্যারেক্টারটি rev এর সাথে যোগ করে।
System.out.println(rev); – rev স্ট্রিংটি প্রিন্ট করে, যা উল্টো স্ট্রিংটি হবে।
আশা করি, এই বিশদ ব্যাখ্যা তোমার জন্য কোডটি বুঝতে সহজ করবে।
 */